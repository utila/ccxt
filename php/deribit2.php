<?php

namespace ccxt;

// PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
// https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

use Exception; // a common import
use \ccxt\ExchangeError;
use \ccxt\AuthenticationError;
use \ccxt\ArgumentsRequired;
use \ccxt\OrderNotFound;

class deribit2 extends Exchange {

    public function describe () {
        return array_replace_recursive(parent::describe (), array(
            'id' => 'deribit2',
            'name' => 'Deribit',
            'countries' => ['NL'], // Netherlands
            'version' => 'v2',
            'userAgent' => null,
            'rateLimit' => 2000,
            'certified' => false,
            'has' => array(
                'cancelAllOrders' => null,
                'cancelOrder' => true,
                'cancelOrders' => null,
                'CORS' => true,
                'createDepositAddress' => null,
                'createLimitOrder' => null,
                'createMarketOrder' => null,
                'createOrder' => true,
                'deposit' => null,
                'editOrder' => true,
                'fetchBalance' => true,
                'fetchBidsAsks' => null,
                'fetchClosedOrders' => true,
                'fetchCurrencies' => true,
                'fetchDepositAddress' => true,
                'fetchDeposits' => null,
                'fetchFundingFees' => null,
                'fetchL2OrderBook' => null,
                'fetchLedger' => null,
                'fetchMarkets' => true,
                'fetchMyTrades' => true,
                'fetchOHLCV' => true,
                'fetchOpenOrders' => true,
                'fetchOrder' => true,
                'fetchOrderBook' => true,
                'fetchOrderBooks' => null,
                'fetchOrders' => null,
                'fetchStatus' => null,
                'fetchTicker' => true,
                'fetchTickers' => null,
                'fetchTime' => true,
                'fetchTrades' => true,
                'fetchTradingFee' => null,
                'fetchTradingFees' => null,
                'fetchTradingLimits' => null,
                'fetchTransactions' => null,
                'fetchWithdrawals' => null,
                'privateAPI' => true,
                'publicAPI' => true,
                'withdraw' => null,
            ),
            'timeframes' => array(
                '1m' => '1',
                '3m' => '3',
                '5m' => '5',
                '10m' => '10',
                '15m' => '15',
                '30m' => '30',
                '1h' => '60',
                '2h' => '120',
                '3h' => '180',
                '6h' => '360',
                '12h' => '720',
                '24h' => '1D',
            ),
            'urls' => array(
                'test' => 'https://test.deribit.com',
                'logo' => 'https://user-images.githubusercontent.com/1294454/41933112-9e2dd65a-798b-11e8-8440-5bab2959fcb8.jpg',
                'api' => 'https://www.deribit.com',
                'www' => 'https://www.deribit.com',
                'doc' => array(
                    'https://docs.deribit.com',
                    'https://github.com/deribit',
                ),
                'fees' => 'https://www.deribit.com/pages/information/fees',
                'referral' => 'https://www.deribit.com/reg-9029.5490',
            ),
            'api' => array(
                'public' => array(
                    '' => [
                        'auth',
                        'hello',
                        'test',
                        'ticker', // instrument_name={market}
                        'get_time',
                        'get_summary',
                        'get_announcements',
                        'get_book_summary_by_currency', // currency={currency}, [kind=array(future|option)]
                        'get_book_summary_by_instrument', // instrument_name={market}
                        'get_contract_size', // instrument_name={market}
                        'get_currencies',
                        'get_funding_chart_data', // instrument_name={market}, length=array(8h|24h|1m)
                        'get_funding_rate_history', // instrument_name={market}, start_timestamp=array(), end_timestamp=array()
                        'get_funding_rate_value', // instrument_name={market}, start_timestamp=array(), end_timestamp=array()
                        'get_historical_volatility', // currency={currency}
                        'get_index', // currency={currency}
                        'get_instruments', // currency={currency}, [kind=array(future|option), expired={bool}]
                        'get_last_settlements_by_currency',
                        'get_last_settlements_by_instrument',
                        'get_last_trades_by_currency', // currency={currency}, [kind=array(future|option), start_id, end_id, count, include_old, sorting=array(asc|desc|default)]
                        'get_last_trades_by_currency_and_time', // currency={currency}, [kind=array(future|option)], start_timestamp, end_timestamp, [count, include_old, sorting=array(asc|desc|default)]
                        'get_last_trades_by_instrument', // instrument_name={market}, [kind=array(future|option), start_id, end_id, count, include_old, sorting=array(asc|desc|default)]
                        'get_last_trades_by_instrument_and_time', // instrument_name={market}, [kind=array(future|option)], start_timestamp, end_timestamp, [count, include_old, sorting=array(asc|desc|default)]
                        'get_order_book', // instrument_name={market}, [depth]
                        'get_trade_volumes',
                        'get_tradingview_chart_data', // instrument_name={market}, start_timestamp, end_timestamp, resolution={timeframe}
                    ],
                ),
                'private' => array(
                    '' => array(
                        'buy',
                        'sell',
                        'get_block_trade',
                        'get_last_block_trades_by_currency',
                        'verify_block_trade',
                        'get_position', // instrument_name={market}
                        'get_positions', // currency={currency}, [kind=array(future|option)
                        'get_order_state',
                        'get_account_summary',
                        'get_new_announcements',
                        'get_open_orders_by_currency',
                        'get_open_orders_by_instrument',
                        'get_user_trades_by_instrument',
                        'get_user_trades_by_instrument_and_time',
                        'get_user_trades_by_currency',
                        'get_user_trades_by_currency_and_time',
                        'get_user_trades_by_order',
                        'get_order_history_by_currency',
                        'get_order_history_by_instrument',
                        'get_margins',
                        'get_order_margin_by_ids',
                        'get_stop_order_history',
                        'get_settlement_history_by_instrument',
                        'get_settlement_history_by_currency',
                        'edit',
                        'cancel',
                        'cancel_all',
                        'cancel_all_by_currency',
                        'cancel_all_by_instrument',
                        'cancel_by_label',
                        'close_position',
                        'execute_block_trade',
                        'invalidate_block_trade_signature',
                    ),
                ),
            ),
            'exceptions' => array(
                // 0 or absent Success, No error
                '9999' => '\\ccxt\\PermissionDenied',           // "api_not_enabled" User didn't enable API for the Account
                '10000' => '\\ccxt\\AuthenticationError',       // "authorization_required" Authorization issue, invalid or absent signature etc
                '10001' => '\\ccxt\\ExchangeError',             // "error" Some general failure, no public information available
                '10002' => '\\ccxt\\InvalidOrder',              // "qty_too_low" Order quantity is too low
                '10003' => '\\ccxt\\InvalidOrder',              // "order_overlap" Rejection, order overlap is found and self-trading is not enabled
                '10004' => '\\ccxt\\OrderNotFound',             // "order_not_found" Attempt to operate with order that can't be found by specified id
                '10005' => '\\ccxt\\InvalidOrder',              // "price_too_low <Limit>" Price is too low, <Limit> defines current limit for the operation
                '10006' => '\\ccxt\\InvalidOrder',              // "price_too_low4idx <Limit>" Price is too low for current index, <Limit> defines current bottom limit for the operation
                '10007' => '\\ccxt\\InvalidOrder',              // "price_too_high <Limit>" Price is too high, <Limit> defines current up limit for the operation
                '10008' => '\\ccxt\\InvalidOrder',              // "price_too_high4idx <Limit>" Price is too high for current index, <Limit> defines current up limit for the operation
                '10009' => '\\ccxt\\InsufficientFunds',         // "not_enough_funds" Account has not enough funds for the operation
                '10010' => '\\ccxt\\OrderNotFound',             // "already_closed" Attempt of doing something with closed order
                '10011' => '\\ccxt\\InvalidOrder',              // "price_not_allowed" This price is not allowed for some reason
                '10012' => '\\ccxt\\InvalidOrder',              // "book_closed" Operation for instrument which order book had been closed
                '10013' => '\\ccxt\\PermissionDenied',          // "pme_max_total_open_orders <Limit>" Total limit of open orders has been exceeded, it is applicable for PME users
                '10014' => '\\ccxt\\PermissionDenied',          // "pme_max_future_open_orders <Limit>" Limit of count of futures' open orders has been exceeded, it is applicable for PME users
                '10015' => '\\ccxt\\PermissionDenied',          // "pme_max_option_open_orders <Limit>" Limit of count of options' open orders has been exceeded, it is applicable for PME users
                '10016' => '\\ccxt\\PermissionDenied',          // "pme_max_future_open_orders_size <Limit>" Limit of size for futures has been exceeded, it is applicable for PME users
                '10017' => '\\ccxt\\PermissionDenied',          // "pme_max_option_open_orders_size <Limit>" Limit of size for options has been exceeded, it is applicable for PME users
                '10019' => '\\ccxt\\PermissionDenied',          // "locked_by_admin" Trading is temporary locked by admin
                '10020' => '\\ccxt\\ExchangeError',             // "invalid_or_unsupported_instrument" Instrument name is not valid
                '10022' => '\\ccxt\\InvalidOrder',              // "invalid_quantity" quantity was not recognized as a valid number
                '10023' => '\\ccxt\\InvalidOrder',              // "invalid_price" price was not recognized as a valid number
                '10024' => '\\ccxt\\InvalidOrder',              // "invalid_max_show" max_show parameter was not recognized as a valid number
                '10025' => '\\ccxt\\InvalidOrder',              // "invalid_order_id" Order id is missing or its format was not recognized as valid
                '10026' => '\\ccxt\\InvalidOrder',              // "price_precision_exceeded" Extra precision of the price is not supported
                '10027' => '\\ccxt\\InvalidOrder',              // "non_integer_contract_amount" Futures contract amount was not recognized as integer
                '10028' => '\\ccxt\\DDoSProtection',            // "too_many_requests" Allowed request rate has been exceeded
                '10029' => '\\ccxt\\OrderNotFound',             // "not_owner_of_order" Attempt to operate with not own order
                '10030' => '\\ccxt\\ExchangeError',             // "must_be_websocket_request" REST request where Websocket is expected
                '10031' => '\\ccxt\\ExchangeError',             // "invalid_args_for_instrument" Some of arguments are not recognized as valid
                '10032' => '\\ccxt\\InvalidOrder',              // "whole_cost_too_low" Total cost is too low
                '10033' => '\\ccxt\\NotSupported',              // "not_implemented" Method is not implemented yet
                '10034' => '\\ccxt\\InvalidOrder',              // "stop_price_too_high" Stop price is too high
                '10035' => '\\ccxt\\InvalidOrder',              // "stop_price_too_low" Stop price is too low
                '10036' => '\\ccxt\\InvalidOrder',              // Max Show Amount is not valid.
                '10040' => '\\ccxt\\ExchangeNotAvailable',      // Request can't be processed right now and should be retried.
                '10041' => '\\ccxt\\ExchangeNotAvailable',      // Settlement is in progress.
                '10043' => '\\ccxt\\InvalidOrder',              // Price has to be rounded to a certain tick size.
                '10044' => '\\ccxt\\InvalidOrder',              // Stop Price has to be rounded to a certain tick size.
                '10045' => '\\ccxt\\InvalidOrder',              // Liquidation order can't be canceled.
                '10046' => '\\ccxt\\InvalidOrder',              // Liquidation order can't be edited.
                '10048' => '\\ccxt\\PermissionDenied',          // The requested operation is not available on this server.
                '11008' => '\\ccxt\\BadRequest',                // This request is not allowed in regards to the filled order.
                '11029' => '\\ccxt\\BadRequest',                // Some invalid input has been detected.
                '11030' => '\\ccxt\\ExchangeError',             // Some rejects which are not considered as very often, more info may be specified in <Reason>.
                '11031' => '\\ccxt\\ExchangeError',             // Some errors which are not considered as very often, more info may be specified in <Error>.
                '11035' => '\\ccxt\\InvalidOrder',              // Allowed amount of stop orders has been exceeded.
                '11036' => '\\ccxt\\InvalidOrder',              // Invalid StopPx (too high or too low) as to current index or market.
                '11037' => '\\ccxt\\InvalidOrder',              // Instrument already not available for trading.
                '11038' => '\\ccxt\\InvalidOrder',              // Advanced orders are not available for futures.
                '11039' => '\\ccxt\\InvalidOrder',              // Advanced post-only orders are not supported yet.
                '11041' => '\\ccxt\\InvalidOrder',              // Advanced order properties can't be set if the order is not advanced.
                '11042' => '\\ccxt\\PermissionDenied',          // Permission for the operation has been denied.
                '11043' => '\\ccxt\\BadRequest',                // Bad argument has been passed.
                '11044' => '\\ccxt\\BadRequest',                // Attempt to do open order operations with the not open order.
                '11045' => '\\ccxt\\BadRequest',                // Event name has not been recognized.
                '11046' => '\\ccxt\\InvalidOrder',              // At several minutes to instrument expiration, corresponding advanced implied volatility orders are not allowed.
                '11047' => '\\ccxt\\BadRequest',                // The specified combination of arguments is not supported.
                '11048' => '\\ccxt\\BadRequest',                // Wrong Max Show for options.
                '11049' => '\\ccxt\\BadRequest',                // Several bad arguments have been passed.
                '11050' => '\\ccxt\\BadRequest',                // Request has not been parsed properly.
                '11051' => '\\ccxt\\ExchangeNotAvailable',      // System is under maintenance.
                '11052' => '\\ccxt\\ExchangeError',             // Subscription error. However, subscription may fail without this error, please check list of subscribed channels returned, as some channels can be not subscribed due to wrong input or lack of permissions.
                '11053' => '\\ccxt\\ExchangeError',             // Specified transfer is not found.
                '11090' => '\\ccxt\\InvalidAddress',            // Invalid address.
                '11091' => '\\ccxt\\InvalidAddress',            // Invalid address for the transfer.
                '11092' => '\\ccxt\\InvalidAddress',            // The address already exists.
                '11093' => '\\ccxt\\PermissionDenied',          // Limit of allowed addresses has been reached.
                '11094' => '\\ccxt\\ExchangeError',             // Some unhandled error on server. Please report to admin. The details of the request will help to locate the problem.
                '11095' => '\\ccxt\\PermissionDenied',          // Deposit address creation has been disabled by admin.
                '11096' => '\\ccxt\\ExchangeError',             // Withdrawal instead of transfer.
                '12000' => '\\ccxt\\AuthenticationError',       // Wrong TFA code
                '12001' => '\\ccxt\\ExchangeError',             // Limit of subbacounts is reached.
                '12002' => '\\ccxt\\ExchangeError',             // The input is not allowed as name of subaccount.
                '12998' => '\\ccxt\\AuthenticationError',       // The number of failed TFA attempts is limited.
                '12003' => '\\ccxt\\PermissionDenied',          // The number of failed login attempts is limited.
                '12004' => '\\ccxt\\PermissionDenied',          // The number of registration requests is limited.
                '12005' => '\\ccxt\\PermissionDenied',          // The country is banned (possibly via IP check).
                '12100' => '\\ccxt\\PermissionDenied',          // Transfer is not allowed. Possible wrong direction or other mistake.
                '12999' => '\\ccxt\\AuthenticationError',       // TFA code is correct but it is already used. Please, use next code.
                '13000' => '\\ccxt\\AuthenticationError',       // Login name is invalid (not allowed or it contains wrong characters).
                '13001' => '\\ccxt\\AuthenticationError',       // Account must be activated.
                '13002' => '\\ccxt\\PermissionDenied',          // Account is blocked by admin.
                '13003' => '\\ccxt\\AuthenticationError',       // This action requires TFA authentication.
                '13004' => '\\ccxt\\AuthenticationError',       // Invalid credentials has been used.
                '13005' => '\\ccxt\\AuthenticationError',       // Password confirmation error.
                '13006' => '\\ccxt\\AuthenticationError',       // Invalid Security Code.
                '13007' => '\\ccxt\\AuthenticationError',       // User's security code has been changed or wrong.
                '13008' => '\\ccxt\\BadRequest',                // Request failed because of invalid input or internal failure.
                '13009' => '\\ccxt\\AuthenticationError',       // Wrong or expired authorization token or bad signature. For example, please check scope of the token, "connection" scope can't be reused for other connections.
                '13010' => '\\ccxt\\BadRequest',                // Invalid input, missing value.
                '13011' => '\\ccxt\\BadRequest',                // Input is too short.
                '13012' => '\\ccxt\\BadRequest',                // Subaccount restrictions.
                '13013' => '\\ccxt\\BadRequest',                // Unsupported or invalid phone number.
                '13014' => '\\ccxt\\ExchangeError',             // SMS sending failed -- phone number is wrong.
                '13015' => '\\ccxt\\AuthenticationError',       // Invalid SMS code.
                '13016' => '\\ccxt\\BadRequest',                // Invalid input.
                '13017' => '\\ccxt\\BadRequest',                // Subscription hailed, invalid subscription parameters.
                '13018' => '\\ccxt\\BadRequest',                // Invalid content type of the request.
                '13019' => '\\ccxt\\BadSymbol',                 // Closed, expired order book.
                '13020' => '\\ccxt\\BadSymbol',                 // Instrument is not found, invalid instrument name.
                '13021' => '\\ccxt\\PermissionDenied',          // Not enough permissions to execute the request, forbidden.
                '-32000' => '\\ccxt\\BadRequest',
                '-32601' => '\\ccxt\\BadRequest',
                '-32602' => '\\ccxt\\BadRequest',
                '-32700' => '\\ccxt\\BadRequest',
            ),
            'precisionMode' => TICK_SIZE,
        ));
    }

    public function fetch_markets ($params = array ()) {
        $allInstruments = array();
        // Fetch available $currencies
        $currenciesResponse = $this->publicGetCurrencies ();
        $currencies = $this->safe_value($currenciesResponse, 'result');
        // Fetch $instruments per currency
        for ($i = 0; $i < count($currencies); $i++) {
            $instrumentsResponse = $this->publicGetInstruments (array( 'currency' => $currencies[$i]['currency'] ));
            $instruments = $this->safe_value($instrumentsResponse, 'result');
            $allInstruments = array_replace_recursive($allInstruments, $instruments);
        }
        // Result object formatting
        $result = array();
        for ($i = 0; $i < count($allInstruments); $i++) {
            $market = $allInstruments[$i];
            $id = $this->safe_string($market, 'instrument_name');
            $baseId = $this->safe_string($market, 'base_currency');
            $quoteId = $this->safe_string($market, 'currency');
            $base = $this->safe_currency_code($baseId);
            $quote = $this->safe_currency_code($quoteId);
            $type = $this->safe_string($market, 'kind');
            $future = ($type === 'future');
            $option = ($type === 'option');
            $active = $this->safe_value($market, 'is_active');
            $result[] = array(
                'id' => $id,
                'symbol' => $id,
                'base' => $base,
                'quote' => $quote,
                'active' => $active,
                'precision' => array(
                    'amount' => $this->safe_float($market, 'contract_size'),
                    'price' => $this->safe_float($market, 'tick_size'),
                ),
                'limits' => array(
                    'amount' => array(
                        'min' => $this->safe_float($market, 'min_trade_amount'),
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => $this->safe_float($market, 'tick_size'),
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
                'type' => $type,
                'spot' => false,
                'future' => $future,
                'option' => $option,
                'info' => $market,
            );
        }
        return $result;
    }

    public function fetch_currencies ($params = array ()) {
        $response = $this->publicGetCurrencies ($params);
        $currencies = $this->safe_value($response, 'result');
        $result = array();
        for ($i = 0; $i < count($currencies); $i++) {
            $currency = $currencies[$i];
            $code = $this->safe_currency_code($this->safe_string($currency['currency'], 'altname'));
            $result[$code] = array(
                'id' => $currency['currency'],
                'code' => $code,
                'info' => $currency,
                'name' => $currency['currency_long'],
                'active' => true,
                'fee' => null, // todo check => which fee
                'precision' => null,
                'limits' => array(
                    'amount' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'price' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'cost' => array(
                        'min' => null,
                        'max' => null,
                    ),
                    'withdraw' => array(
                        'min' => null,
                        'max' => null,
                    ),
                ),
            );
        }
        return $result;
    }

    public function fetch_balance ($params = array ()) {
        $allBalances = array();
        // Fetch available $currencies
        $currenciesResponse = $this->publicGetCurrencies (array());
        $currencies = $this->safe_value($currenciesResponse, 'result');
        // Assign all account summaries (per currency)
        for ($i = 0; $i < count($currencies); $i++) {
            $currentCurrency = $this->safe_string($currencies[$i], 'currency');
            $accountSummaryResponse = $this->privateGetAccountSummary (array( 'currency' => $currentCurrency ));
            $allBalances[$currentCurrency] = array(
                'free' => $this->safe_float($accountSummaryResponse['result'], 'available_funds'),
                'used' => $this->safe_float($accountSummaryResponse['result'], 'maintenance_margin'),
                'total' => $this->safe_float($accountSummaryResponse['result'], 'equity'),
            );
        }
        return $this->parse_balance($allBalances);
    }

    public function fetch_deposit_address ($currency, $params = array ()) {
        $response = $this->privateGetAccountSummary (array( 'currency' => $currency ));
        $address = $this->safe_string($response, 'deposit_address');
        return array(
            'currency' => $this->safe_currency_code('BTC'),
            'address' => $address,
            'tag' => null,
            'info' => $response,
        );
    }

    public function parse_ticker ($ticker, $market = null) {
        $timestamp = $this->safe_integer($ticker, 'timestamp');
        $symbol = $this->findSymbol ($this->safe_string($ticker, 'instrument_name'), $market);
        $last = $this->safe_float($ticker, 'last_price');
        $stats = $this->safe_value($ticker, 'stats');
        return array(
            'symbol' => $symbol,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'high' => $this->safe_float($stats, 'high'),
            'low' => $this->safe_float($stats, 'low'),
            'bid' => $this->safe_float($ticker, 'best_bid_price'),
            'bidVolume' => null,
            'ask' => $this->safe_float($ticker, 'best_ask_price'),
            'askVolume' => null,
            'vwap' => null,
            'open' => null,
            'close' => $last,
            'last' => $last,
            'previousClose' => null,
            'change' => null,
            'percentage' => null,
            'average' => null,
            'baseVolume' => null,
            'quoteVolume' => $this->safe_float($stats, 'volume'),
            'info' => $ticker,
        );
    }

    public function fetch_ticker ($symbol, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array(
            'instrument_name' => $market['id'],
        );
        $response = $this->publicGetTicker (array_merge($request, $params));
        return $this->parse_ticker($response['result'], $market);
    }

    public function parse_trade ($trade, $market = null) {
        $id = $this->safe_string($trade, 'trade_id');
        $orderId = $this->safe_string($trade, 'order_id');
        $symbol = null;
        if ($market !== null) {
            $symbol = $market['symbol'];
        }
        $timestamp = $this->safe_integer($trade, 'timestamp');
        $side = $this->safe_string($trade, 'direction');
        $price = $this->safe_float($trade, 'price');
        $amount = $this->safe_float($trade, 'amount');
        $cost = null;
        if ($amount !== null) {
            if ($price !== null) {
                $cost = $amount * $price;
            }
        }
        $fee = null;
        $feeCost = $this->safe_float($trade, 'fee');
        if ($feeCost !== null) {
            $feeCurrencyId = $this->safe_string($trade, 'fee_currency');
            $feeCurrencyCode = $this->safe_currency_code($feeCurrencyId);
            $fee = array(
                'cost' => $feeCost,
                'currency' => $feeCurrencyCode,
            );
        }
        return array(
            'id' => $id,
            'info' => $trade,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'symbol' => $symbol,
            'order' => $orderId,
            'type' => null,
            'side' => $side,
            'takerOrMaker' => null,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'fee' => $fee,
        );
    }

    public function fetch_trades ($symbol, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $response = array();
        $market = $this->market ($symbol);
        $request = array(
            'instrument_name' => $market['id'],
        );
        if ($limit !== null) {
            $request['count'] = $limit;
        } else {
            $request['count'] = 1000;
        }
        if ($since !== null) {
            $request['start_timestamp'] = $since;
            if (is_array($params) && array_key_exists('to', $params)) {
                $request['end_timestamp'] = $params['to'];
            } else {
                $request['end_timestamp'] = $this->milliseconds ();
            }
            $response = $this->publicGetLastTradesByInstrumentAndTime (array_merge($request, $params));
        } else {
            $response = $this->publicGetLastTradesByInstrument (array_merge($request, $params));
        }
        $result = $this->safe_value($response, 'result', array());
        $trades = $this->safe_value($result, 'trades', array());
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function fetch_order_book ($symbol, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array(
            'instrument_name' => $market['id'],
        );
        $timestamp = $this->nonce ();
        $response = $this->publicGetOrderBook (array_merge($request, $params));
        $orderbook = $this->parse_order_book($response['result'], $timestamp, 'bids', 'asks');
        return array_merge($orderbook, array(
            'nonce' => $this->safe_integer($response['result'], 'timestamp'),
        ));
    }

    public function convert_trading_view_to_ohlcv ($ohlcvs) {
        // "jsonrpc" => "2.0",
        // "id" => 833,
        // "$result" => array(
        //   "volume" => [19.007942601, 20.095877981],
        //   "cost" => [19000.0, 23400.0],
        //   "ticks" => [1554373800000, 1554375600000],
        //   "status" => "ok",
        //   "open" => [4963.42, 4986.29],
        //   "low" => [4728.94, 4726.6],
        //   "high" => [5185.45, 5250.87],
        //   "close" => [5052.95, 5013.59]
        // ),
        // "usIn" => 1554381680742493,
        // "usOut" => 1554381680742698,
        // "usDiff" => 205,
        // "testnet" => false
        // }
        $result = array();
        for ($i = 0; $i < count($ohlcvs['ticks']); $i++) {
            $result[] = [
                $ohlcvs['ticks'][$i],
                $ohlcvs['open'][$i],
                $ohlcvs['high'][$i],
                $ohlcvs['low'][$i],
                $ohlcvs['close'][$i],
                $ohlcvs['volume'][$i],
            ];
        }
        return $result;
    }

    public function fetch_ohlcv ($symbol, $timeframe = '1m', $since = null, $limit = null, $params = array ()) {
        if ($since === null && $limit === null) {
            throw new ArgumentsRequired($this->id . ' fetchOHLCV requires either a `$since` argument or a `$limit` argument (or both)');
        }
        $this->load_markets();
        $market = $this->market ($symbol);
        $periodInSeconds = $this->parse_timeframe($timeframe);
        $duration = $periodInSeconds * $limit * 1000;
        $to = $this->milliseconds ();
        if ($since === null) {
            $since = $to - $duration;
        } else {
            $to = $this->sum ($since, $duration);
        }
        $request = array(
            'instrument_name' => $market['id'],
            'resolution' => $this->timeframes[$timeframe],
            'start_timestamp' => intval ($since),
            'end_timestamp' => $to,
        );
        $response = $this->publicGetTradingviewChartData (array_merge($request, $params));
        //
        //     {
        //         "success" => true,
        //         "$result":array(
        //             array(
        //                 "close":177.23,
        //                 "high":177.45,
        //                 "low":177.2,
        //                 "open":177.43,
        //                 "startTime":"2019-10-17T13:27:00+00:00",
        //                 "time":1571318820000.0,
        //                 "volume":0.0
        //             ),
        //             array(
        //                 "close":177.26,
        //                 "high":177.33,
        //                 "low":177.23,
        //                 "open":177.23,
        //                 "startTime":"2019-10-17T13:28:00+00:00",
        //                 "time":1571318880000.0,
        //                 "volume":0.0
        //             ),
        //         ),
        //     }
        //
        $result = $this->safe_value($response, 'result', array());
        return $this->parse_trading_view_ohlcv($result, $market, $timeframe, $since, $limit);
    }

    public function parse_trading_view_ohlcv ($ohlcvs, $market = null, $timeframe = '1m', $since = null, $limit = null) {
        $result = $this->convert_trading_view_to_ohlcv($ohlcvs);
        return $this->parse_ohlcvs($result, $market, $timeframe, $since, $limit);
    }

    public function parse_order_status ($status) {
        $statuses = array(
            'open' => 'open',
            'cancelled' => 'canceled',
            'filled' => 'closed',
        );
        return $this->safe_string($statuses, $status, $status);
    }

    public function parse_order ($order, $market = null) {
        $timestamp = $this->safe_integer($order, 'creation_timestamp');
        $lastUpdate = $this->safe_integer($order, 'last_update_timestamp');
        $lastTradeTimestamp = $this->safe_integer($order, 'last_update_timestamp');
        $id = $this->safe_string($order, 'order_id');
        $price = $this->safe_float($order, 'price');
        $average = $this->safe_float($order, 'average_price');
        $amount = $this->safe_float($order, 'amount');
        $filled = $this->safe_float($order, 'filled_amount');
        if ($lastTradeTimestamp === null) {
            if ($filled !== null) {
                if ($filled > 0) {
                    $lastTradeTimestamp = $lastUpdate;
                }
            }
        }
        $remaining = null;
        $cost = null;
        if ($filled !== null) {
            if ($amount !== null) {
                $remaining = $amount - $filled;
            }
            if ($price !== null) {
                $cost = $price * $filled;
            }
        }
        $status = $this->parse_order_status($this->safe_string($order, 'order_state'));
        $side = $this->safe_string($order, 'direction');
        if ($side !== null) {
            $side = strtolower($side);
        }
        $feeCost = $this->safe_float($order, 'commission');
        if ($feeCost !== null) {
            $feeCost = abs($feeCost);
        }
        $fee = array(
            'cost' => $feeCost,
            'currency' => 'BTC',
        );
        $type = $this->safe_string($order, 'order_type');
        $marketId = $this->safe_string($order, 'instrument_name');
        $symbol = null;
        if (is_array($this->markets_by_id) && array_key_exists($marketId, $this->markets_by_id)) {
            $market = $this->markets_by_id[$marketId];
            $symbol = $market['symbol'];
        }
        return array(
            'info' => $order,
            'id' => $id,
            'timestamp' => $timestamp,
            'datetime' => $this->iso8601 ($timestamp),
            'lastTradeTimestamp' => $lastTradeTimestamp,
            'symbol' => $symbol,
            'type' => $type,
            'side' => $side,
            'price' => $price,
            'amount' => $amount,
            'cost' => $cost,
            'average' => $average,
            'filled' => $filled,
            'remaining' => $remaining,
            'status' => $status,
            'fee' => $fee,
            'trades' => null, // todo => parse trades
        );
    }

    public function fetch_order ($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'order_id' => $id,
        );
        $response = $this->privateGetOrderState (array_merge($request, $params));
        $result = $this->safe_value($response, 'result');
        if ($result === null) {
            throw new OrderNotFound($this->id . ' fetchOrder() ' . $this->json ($response));
        }
        return $this->parse_order($result);
    }

    public function create_order ($symbol, $type, $side, $amount, $price = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'instrument_name' => $this->market_id($symbol),
            'amount' => $amount,
            'type' => $type,
            // 'post_only' => 'false' or 'true', https://github.com/ccxt/ccxt/issues/5159
        );
        if ($type === 'stop_market' && $price !== null) {
            $request['stop_price'] = $price;
            $trigger = $this->safe_value($params, 'trigger');
            if ($trigger === null) {
                $trigger = 'last_price';
            }
            $request['trigger'] = $trigger;
        } else if ($price !== null) {
            $request['price'] = $price;
        }
        $method = 'private' . $this->capitalize ($side);
        $response = $this->$method (array_merge($request, $params));
        $order = $this->safe_value($response['result'], 'order');
        if ($order === null) {
            return $response;
        }
        return $this->parse_order($order);
    }

    public function edit_order ($id, $symbol, $type, $side, $amount = null, $price = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'order_id' => $id,
        );
        if ($amount !== null) {
            $request['amount'] = $amount;
        }
        if ($price !== null) {
            $request['price'] = $price;
        }
        $response = $this->privateEdit (array_merge($request, $params));
        return $this->parse_order($response['result']['order']);
    }

    public function cancel_order ($id, $symbol = null, $params = array ()) {
        $this->load_markets();
        $request = array(
            'order_id' => $id,
        );
        $response = $this->privateCancel (array_merge($request, $params));
        return $this->parse_order($response['result']['order']);
    }

    public function fetch_open_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchOpenOrders() requires a `$symbol` argument');
        }
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array(
            'instrument_name' => $market['id'],
        );
        $response = $this->privateGetOpenOrdersByInstrument (array_merge($request, $params));
        return $this->parse_orders($response['result'], $market, $since, $limit);
    }

    public function fetch_closed_orders ($symbol = null, $since = null, $limit = null, $params = array ()) {
        if ($symbol === null) {
            throw new ArgumentsRequired($this->id . ' fetchClosedOrders() requires a `$symbol` argument');
        }
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array(
            'instrument_name' => $market['id'],
        );
        $response = $this->privateGetOrderHistoryByInstrument (array_merge($request, $params));
        return $this->parse_orders($response['result'], $market, $since, $limit);
    }

    public function fetch_my_trades ($symbol = null, $since = null, $limit = null, $params = array ()) {
        $this->load_markets();
        $market = $this->market ($symbol);
        $request = array(
            'instrument_name' => $market['id'],
        );
        if ($limit !== null) {
            $request['count'] = $limit; // default = 20
        }
        $response = $this->privateGetUserTradesByInstrument (array_merge($request, $params));
        $trades = $this->safe_value($response, 'result', array());
        return $this->parse_trades($trades, $market, $since, $limit);
    }

    public function fetch_time ($params = array ()) {
        $response = $this->publicGetTime ();
        return $this->safe_integer($response, 'result');
    }

    public function nonce () {
        return $this->milliseconds ();
    }

    public function random_nonce ($length) {
        $result = $this->hash ($this->encode ($this->apiKey . (string) $this->nonce ()), 'sha512', 'base64');
        return mb_substr($result, 0, $length - 0);
    }

    public function sign ($path, $api = 'public', $method = 'POST', $params = array (), $headers = null, $body = null) {
        $url = $this->urls['api'] . '/api/' . $this->version . '/' . $api;
        $query = $this->omit ($params, $this->extract_params($path));
        if ($api === 'public') {
            if ($path === 'auth') {
                $this->check_required_credentials();
            }
        } else {
            $nonce = $this->nonce ();
            $this->check_required_credentials();
            $token = $this->safe_string($this->options, 'accessToken');
            if ($token === null) {
                $this->sign_in ();
            } else {
                $expires = $this->safe_integer($this->options, 'expires');
                if ($expires !== null) {
                    if ($nonce >= $expires) {
                        $this->sign_in ();
                    } else {
                        $this->refresh_token ();
                    }
                }
            }
            if ($query) {
                $token = $this->safe_string($this->options, 'accessToken');
            }
            $headers = array(
                'Content-Type' => 'application/json',
                'Authorization' => 'bearer ' . $token,
            );
            $query->extend ($query, array( 'access_token' => $token ));
            $query = $this->keysort ($query);
            $body = $this->json ($query);
        }
        return array( 'url' => $url, 'method' => $method, 'body' => $body, 'headers' => $headers );
    }

    public function sign_in ($params = array ()) {
        $data = array(
            'grant_type' => 'client_credentials',
            'client_id' => $this->apiKey,
            'client_secret' => $this->secret,
        );
        $response = $this->publicAuth (array_merge($data, $params));
        $result = $this->safe_value($response, 'result');
        $accessToken = $this->safe_string($result, 'access_token');
        $refreshToken = $this->safe_string($result, 'refresh_token');
        if (!$accessToken) {
            throw new AuthenticationError($this->id . ' signIn() failed to authenticate. Access token missing from $response->');
        }
        $expiresIn = $this->safe_integer($result, 'expires_in');
        $this->options['expires'] = $this->sum ($this->nonce (), $expiresIn * 1000);
        $this->options['accessToken'] = $accessToken;
        $this->options['refreshToken'] = $refreshToken;
        return $result;
    }

    public function refresh_token ($params = array ()) {
        $data = array(
            'grant_type' => 'refresh_token',
            'refresh_token' => $this->options['refreshToken'],
        );
        $response = $this->publicAuth (array_merge($data, $params));
        $result = $this->safe_value($response, 'result');
        $accessToken = $this->safe_string($result, 'access_token');
        $refreshToken = $this->safe_string($result, 'refresh_token');
        if (!$accessToken) {
            throw new AuthenticationError($this->id . ' signIn() failed to authenticate. Access token missing from $response->');
        }
        $expiresIn = $this->safe_integer($result, 'expires_in');
        $this->options['expires'] = $this->sum ($this->nonce (), $expiresIn * 1000);
        $this->options['accessToken'] = $accessToken;
        $this->options['refreshToken'] = $refreshToken;
        return $result;
    }

    public function handle_errors ($httpCode, $reason, $url, $method, $headers, $body, $response, $requestHeaders, $requestBody) {
        if (!$response) {
            return; // fallback to default $error handler
        }
        $error = $this->safe_string($response, 'error');
        if (($error !== null) && ($error !== '0')) {
            $feedback = $this->id . ' ' . $body;
            $this->throw_exactly_matched_exception($this->exceptions, $error, $feedback);
            throw new ExchangeError($feedback); // unknown message
        }
    }
}
