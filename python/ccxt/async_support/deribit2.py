# -*- coding: utf-8 -*-

# PLEASE DO NOT EDIT THIS FILE, IT IS GENERATED AND WILL BE OVERWRITTEN:
# https://github.com/ccxt/ccxt/blob/master/CONTRIBUTING.md#how-to-contribute-code

from ccxt.async_support.base.exchange import Exchange
from ccxt.base.errors import ExchangeError
from ccxt.base.errors import AuthenticationError
from ccxt.base.errors import PermissionDenied
from ccxt.base.errors import ArgumentsRequired
from ccxt.base.errors import BadRequest
from ccxt.base.errors import BadSymbol
from ccxt.base.errors import InsufficientFunds
from ccxt.base.errors import InvalidAddress
from ccxt.base.errors import InvalidOrder
from ccxt.base.errors import OrderNotFound
from ccxt.base.errors import NotSupported
from ccxt.base.errors import DDoSProtection
from ccxt.base.errors import ExchangeNotAvailable
from ccxt.base.decimal_to_precision import TICK_SIZE


class deribit2(Exchange):

    def describe(self):
        return self.deep_extend(super(deribit2, self).describe(), {
            'id': 'deribit2',
            'name': 'Deribit',
            'countries': ['NL'],  # Netherlands
            'version': 'v2',
            'userAgent': None,
            'rateLimit': 2000,
            'certified': False,
            'has': {
                'cancelAllOrders': None,
                'cancelOrder': True,
                'cancelOrders': None,
                'CORS': True,
                'createDepositAddress': None,
                'createLimitOrder': None,
                'createMarketOrder': None,
                'createOrder': True,
                'deposit': None,
                'editOrder': True,
                'fetchBalance': True,
                'fetchBidsAsks': None,
                'fetchClosedOrders': True,
                'fetchCurrencies': True,
                'fetchDepositAddress': True,
                'fetchDeposits': None,
                'fetchFundingFees': None,
                'fetchL2OrderBook': None,
                'fetchLedger': None,
                'fetchMarkets': True,
                'fetchMyTrades': True,
                'fetchOHLCV': True,
                'fetchOpenOrders': True,
                'fetchOrder': True,
                'fetchOrderBook': True,
                'fetchOrderBooks': None,
                'fetchOrders': None,
                'fetchStatus': None,
                'fetchTicker': True,
                'fetchTickers': None,
                'fetchTime': True,
                'fetchTrades': True,
                'fetchTradingFee': None,
                'fetchTradingFees': None,
                'fetchTradingLimits': None,
                'fetchTransactions': None,
                'fetchWithdrawals': None,
                'privateAPI': True,
                'publicAPI': True,
                'withdraw': None,
            },
            'timeframes': {
                '1m': '1',
                '3m': '3',
                '5m': '5',
                '10m': '10',
                '15m': '15',
                '30m': '30',
                '1h': '60',
                '2h': '120',
                '3h': '180',
                '6h': '360',
                '12h': '720',
                '24h': '1D',
            },
            'urls': {
                'test': 'https://test.deribit.com',
                'logo': 'https://user-images.githubusercontent.com/1294454/41933112-9e2dd65a-798b-11e8-8440-5bab2959fcb8.jpg',
                'api': 'https://www.deribit.com',
                'www': 'https://www.deribit.com',
                'doc': [
                    'https://docs.deribit.com',
                    'https://github.com/deribit',
                ],
                'fees': 'https://www.deribit.com/pages/information/fees',
                'referral': 'https://www.deribit.com/reg-9029.5490',
            },
            'api': {
                'public': {
                    '': [
                        'auth',
                        'hello',
                        'test',
                        'ticker',  # instrument_name={market}
                        'get_time',
                        'get_summary',
                        'get_announcements',
                        'get_book_summary_by_currency',  # currency={currency}, [kind={future|option}]
                        'get_book_summary_by_instrument',  # instrument_name={market}
                        'get_contract_size',  # instrument_name={market}
                        'get_currencies',
                        'get_funding_chart_data',  # instrument_name={market}, length={8h|24h|1m}
                        'get_funding_rate_history',  # instrument_name={market}, start_timestamp={}, end_timestamp={}
                        'get_funding_rate_value',  # instrument_name={market}, start_timestamp={}, end_timestamp={}
                        'get_historical_volatility',  # currency={currency}
                        'get_index',  # currency={currency}
                        'get_instruments',  # currency={currency}, [kind={future|option}, expired={bool}]
                        'get_last_settlements_by_currency',
                        'get_last_settlements_by_instrument',
                        'get_last_trades_by_currency',  # currency={currency}, [kind={future|option}, start_id, end_id, count, include_old, sorting={asc|desc|default}]
                        'get_last_trades_by_currency_and_time',  # currency={currency}, [kind={future|option}], start_timestamp, end_timestamp, [count, include_old, sorting={asc|desc|default}]
                        'get_last_trades_by_instrument',  # instrument_name={market}, [kind={future|option}, start_id, end_id, count, include_old, sorting={asc|desc|default}]
                        'get_last_trades_by_instrument_and_time',  # instrument_name={market}, [kind={future|option}], start_timestamp, end_timestamp, [count, include_old, sorting={asc|desc|default}]
                        'get_order_book',  # instrument_name={market}, [depth]
                        'get_trade_volumes',
                        'get_tradingview_chart_data',  # instrument_name={market}, start_timestamp, end_timestamp, resolution={timeframe}
                    ],
                },
                'private': {
                    '': [
                        'buy',
                        'sell',
                        'get_block_trade',
                        'get_last_block_trades_by_currency',
                        'verify_block_trade',
                        'get_position',  # instrument_name={market}
                        'get_positions',  # currency={currency}, [kind={future|option}
                        'get_order_state',
                        'get_account_summary',
                        'get_new_announcements',
                        'get_open_orders_by_currency',
                        'get_open_orders_by_instrument',
                        'get_user_trades_by_instrument',
                        'get_user_trades_by_instrument_and_time',
                        'get_user_trades_by_currency',
                        'get_user_trades_by_currency_and_time',
                        'get_user_trades_by_order',
                        'get_order_history_by_currency',
                        'get_order_history_by_instrument',
                        'get_margins',
                        'get_order_margin_by_ids',
                        'get_stop_order_history',
                        'get_settlement_history_by_instrument',
                        'get_settlement_history_by_currency',
                        'edit',
                        'cancel',
                        'cancel_all',
                        'cancel_all_by_currency',
                        'cancel_all_by_instrument',
                        'cancel_by_label',
                        'close_position',
                        'execute_block_trade',
                        'invalidate_block_trade_signature',
                    ],
                },
            },
            'exceptions': {
                # 0 or absent Success, No error
                '9999': PermissionDenied,           # "api_not_enabled" User didn't enable API for the Account
                '10000': AuthenticationError,       # "authorization_required" Authorization issue, invalid or absent signature etc
                '10001': ExchangeError,             # "error" Some general failure, no public information available
                '10002': InvalidOrder,              # "qty_too_low" Order quantity is too low
                '10003': InvalidOrder,              # "order_overlap" Rejection, order overlap is found and self-trading is not enabled
                '10004': OrderNotFound,             # "order_not_found" Attempt to operate with order that can't be found by specified id
                '10005': InvalidOrder,              # "price_too_low <Limit>" Price is too low, <Limit> defines current limit for the operation
                '10006': InvalidOrder,              # "price_too_low4idx <Limit>" Price is too low for current index, <Limit> defines current bottom limit for the operation
                '10007': InvalidOrder,              # "price_too_high <Limit>" Price is too high, <Limit> defines current up limit for the operation
                '10008': InvalidOrder,              # "price_too_high4idx <Limit>" Price is too high for current index, <Limit> defines current up limit for the operation
                '10009': InsufficientFunds,         # "not_enough_funds" Account has not enough funds for the operation
                '10010': OrderNotFound,             # "already_closed" Attempt of doing something with closed order
                '10011': InvalidOrder,              # "price_not_allowed" This price is not allowed for some reason
                '10012': InvalidOrder,              # "book_closed" Operation for instrument which order book had been closed
                '10013': PermissionDenied,          # "pme_max_total_open_orders <Limit>" Total limit of open orders has been exceeded, it is applicable for PME users
                '10014': PermissionDenied,          # "pme_max_future_open_orders <Limit>" Limit of count of futures' open orders has been exceeded, it is applicable for PME users
                '10015': PermissionDenied,          # "pme_max_option_open_orders <Limit>" Limit of count of options' open orders has been exceeded, it is applicable for PME users
                '10016': PermissionDenied,          # "pme_max_future_open_orders_size <Limit>" Limit of size for futures has been exceeded, it is applicable for PME users
                '10017': PermissionDenied,          # "pme_max_option_open_orders_size <Limit>" Limit of size for options has been exceeded, it is applicable for PME users
                '10019': PermissionDenied,          # "locked_by_admin" Trading is temporary locked by admin
                '10020': ExchangeError,             # "invalid_or_unsupported_instrument" Instrument name is not valid
                '10022': InvalidOrder,              # "invalid_quantity" quantity was not recognized as a valid number
                '10023': InvalidOrder,              # "invalid_price" price was not recognized as a valid number
                '10024': InvalidOrder,              # "invalid_max_show" max_show parameter was not recognized as a valid number
                '10025': InvalidOrder,              # "invalid_order_id" Order id is missing or its format was not recognized as valid
                '10026': InvalidOrder,              # "price_precision_exceeded" Extra precision of the price is not supported
                '10027': InvalidOrder,              # "non_integer_contract_amount" Futures contract amount was not recognized as integer
                '10028': DDoSProtection,            # "too_many_requests" Allowed request rate has been exceeded
                '10029': OrderNotFound,             # "not_owner_of_order" Attempt to operate with not own order
                '10030': ExchangeError,             # "must_be_websocket_request" REST request where Websocket is expected
                '10031': ExchangeError,             # "invalid_args_for_instrument" Some of arguments are not recognized as valid
                '10032': InvalidOrder,              # "whole_cost_too_low" Total cost is too low
                '10033': NotSupported,              # "not_implemented" Method is not implemented yet
                '10034': InvalidOrder,              # "stop_price_too_high" Stop price is too high
                '10035': InvalidOrder,              # "stop_price_too_low" Stop price is too low
                '10036': InvalidOrder,              # Max Show Amount is not valid.
                '10040': ExchangeNotAvailable,      # Request can't be processed right now and should be retried.
                '10041': ExchangeNotAvailable,      # Settlement is in progress.
                '10043': InvalidOrder,              # Price has to be rounded to a certain tick size.
                '10044': InvalidOrder,              # Stop Price has to be rounded to a certain tick size.
                '10045': InvalidOrder,              # Liquidation order can't be canceled.
                '10046': InvalidOrder,              # Liquidation order can't be edited.
                '10048': PermissionDenied,          # The requested operation is not available on self server.
                '11008': BadRequest,                # This request is not allowed in regards to the filled order.
                '11029': BadRequest,                # Some invalid input has been detected.
                '11030': ExchangeError,             # Some rejects which are not considered as very often, more info may be specified in <Reason>.
                '11031': ExchangeError,             # Some errors which are not considered as very often, more info may be specified in <Error>.
                '11035': InvalidOrder,              # Allowed amount of stop orders has been exceeded.
                '11036': InvalidOrder,              # Invalid StopPx(too high or too low) as to current index or market.
                '11037': InvalidOrder,              # Instrument already not available for trading.
                '11038': InvalidOrder,              # Advanced orders are not available for futures.
                '11039': InvalidOrder,              # Advanced post-only orders are not supported yet.
                '11041': InvalidOrder,              # Advanced order properties can't be set if the order is not advanced.
                '11042': PermissionDenied,          # Permission for the operation has been denied.
                '11043': BadRequest,                # Bad argument has been passed.
                '11044': BadRequest,                # Attempt to do open order operations with the not open order.
                '11045': BadRequest,                # Event name has not been recognized.
                '11046': InvalidOrder,              # At several minutes to instrument expiration, corresponding advanced implied volatility orders are not allowed.
                '11047': BadRequest,                # The specified combination of arguments is not supported.
                '11048': BadRequest,                # Wrong Max Show for options.
                '11049': BadRequest,                # Several bad arguments have been passed.
                '11050': BadRequest,                # Request has not been parsed properly.
                '11051': ExchangeNotAvailable,      # System is under maintenance.
                '11052': ExchangeError,             # Subscription error. However, subscription may fail without self error, please check list of subscribed channels returned, as some channels can be not subscribed due to wrong input or lack of permissions.
                '11053': ExchangeError,             # Specified transfer is not found.
                '11090': InvalidAddress,            # Invalid address.
                '11091': InvalidAddress,            # Invalid address for the transfer.
                '11092': InvalidAddress,            # The address already exists.
                '11093': PermissionDenied,          # Limit of allowed addresses has been reached.
                '11094': ExchangeError,             # Some unhandled error on server. Please report to admin. The details of the request will help to locate the problem.
                '11095': PermissionDenied,          # Deposit address creation has been disabled by admin.
                '11096': ExchangeError,             # Withdrawal instead of transfer.
                '12000': AuthenticationError,       # Wrong TFA code
                '12001': ExchangeError,             # Limit of subbacounts is reached.
                '12002': ExchangeError,             # The input is not allowed as name of subaccount.
                '12998': AuthenticationError,       # The number of failed TFA attempts is limited.
                '12003': PermissionDenied,          # The number of failed login attempts is limited.
                '12004': PermissionDenied,          # The number of registration requests is limited.
                '12005': PermissionDenied,          # The country is banned(possibly via IP check).
                '12100': PermissionDenied,          # Transfer is not allowed. Possible wrong direction or other mistake.
                '12999': AuthenticationError,       # TFA code is correct but it is already used. Please, use next code.
                '13000': AuthenticationError,       # Login name is invalid(not allowed or it contains wrong characters).
                '13001': AuthenticationError,       # Account must be activated.
                '13002': PermissionDenied,          # Account is blocked by admin.
                '13003': AuthenticationError,       # This action requires TFA authentication.
                '13004': AuthenticationError,       # Invalid credentials has been used.
                '13005': AuthenticationError,       # Password confirmation error.
                '13006': AuthenticationError,       # Invalid Security Code.
                '13007': AuthenticationError,       # User's security code has been changed or wrong.
                '13008': BadRequest,                # Request failed because of invalid input or internal failure.
                '13009': AuthenticationError,       # Wrong or expired authorization token or bad signature. For example, please check scope of the token, "connection" scope can't be reused for other connections.
                '13010': BadRequest,                # Invalid input, missing value.
                '13011': BadRequest,                # Input is too short.
                '13012': BadRequest,                # Subaccount restrictions.
                '13013': BadRequest,                # Unsupported or invalid phone number.
                '13014': ExchangeError,             # SMS sending failed -- phone number is wrong.
                '13015': AuthenticationError,       # Invalid SMS code.
                '13016': BadRequest,                # Invalid input.
                '13017': BadRequest,                # Subscription hailed, invalid subscription parameters.
                '13018': BadRequest,                # Invalid content type of the request.
                '13019': BadSymbol,                 # Closed, expired order book.
                '13020': BadSymbol,                 # Instrument is not found, invalid instrument name.
                '13021': PermissionDenied,          # Not enough permissions to execute the request, forbidden.
                '-32000': BadRequest,
                '-32601': BadRequest,
                '-32602': BadRequest,
                '-32700': BadRequest,
            },
            'precisionMode': TICK_SIZE,
        })

    async def fetch_markets(self, params={}):
        allInstruments = {}
        # Fetch available currencies
        currenciesResponse = await self.publicGetCurrencies()
        currencies = self.safe_value(currenciesResponse, 'result')
        # Fetch instruments per currency
        for i in range(0, len(currencies)):
            instrumentsResponse = await self.publicGetInstruments({'currency': currencies[i]['currency']})
            instruments = self.safe_value(instrumentsResponse, 'result')
            allInstruments = self.deep_extend(allInstruments, instruments)
        # Result object formatting
        result = []
        for i in range(0, len(allInstruments)):
            market = allInstruments[i]
            id = self.safe_string(market, 'instrument_name')
            baseId = self.safe_string(market, 'base_currency')
            quoteId = self.safe_string(market, 'currency')
            base = self.safe_currency_code(baseId)
            quote = self.safe_currency_code(quoteId)
            type = self.safe_string(market, 'kind')
            future = (type == 'future')
            option = (type == 'option')
            active = self.safe_value(market, 'is_active')
            result.append({
                'id': id,
                'symbol': id,
                'base': base,
                'quote': quote,
                'active': active,
                'precision': {
                    'amount': self.safe_float(market, 'contract_size'),
                    'price': self.safe_float(market, 'tick_size'),
                },
                'limits': {
                    'amount': {
                        'min': self.safe_float(market, 'min_trade_amount'),
                        'max': None,
                    },
                    'price': {
                        'min': self.safe_float(market, 'tick_size'),
                        'max': None,
                    },
                    'cost': {
                        'min': None,
                        'max': None,
                    },
                },
                'type': type,
                'spot': False,
                'future': future,
                'option': option,
                'info': market,
            })
        return result

    async def fetch_currencies(self, params={}):
        response = await self.publicGetCurrencies(params)
        currencies = self.safe_value(response, 'result')
        result = {}
        for i in range(0, len(currencies)):
            currency = currencies[i]
            code = self.safe_currency_code(self.safe_string(currency['currency'], 'altname'))
            result[code] = {
                'id': currency['currency'],
                'code': code,
                'info': currency,
                'name': currency['currency_long'],
                'active': True,
                'fee': None,  # todo check: which fee
                'precision': None,
                'limits': {
                    'amount': {
                        'min': None,
                        'max': None,
                    },
                    'price': {
                        'min': None,
                        'max': None,
                    },
                    'cost': {
                        'min': None,
                        'max': None,
                    },
                    'withdraw': {
                        'min': None,
                        'max': None,
                    },
                },
            }
        return result

    async def fetch_balance(self, params={}):
        allBalances = {}
        # Fetch available currencies
        currenciesResponse = await self.publicGetCurrencies({})
        currencies = self.safe_value(currenciesResponse, 'result')
        # Assign all account summaries(per currency)
        for i in range(0, len(currencies)):
            currentCurrency = self.safe_string(currencies[i], 'currency')
            accountSummaryResponse = await self.privateGetAccountSummary({'currency': currentCurrency})
            allBalances[currentCurrency] = {
                'free': self.safe_float(accountSummaryResponse['result'], 'available_funds'),
                'used': self.safe_float(accountSummaryResponse['result'], 'maintenance_margin'),
                'total': self.safe_float(accountSummaryResponse['result'], 'equity'),
            }
        return self.parse_balance(allBalances)

    async def fetch_deposit_address(self, currency, params={}):
        response = await self.privateGetAccountSummary({'currency': currency})
        address = self.safe_string(response, 'deposit_address')
        return {
            'currency': self.safe_currency_code('BTC'),
            'address': address,
            'tag': None,
            'info': response,
        }

    def parse_ticker(self, ticker, market=None):
        timestamp = self.safe_integer(ticker, 'timestamp')
        symbol = self.findSymbol(self.safe_string(ticker, 'instrument_name'), market)
        last = self.safe_float(ticker, 'last_price')
        stats = self.safe_value(ticker, 'stats')
        return {
            'symbol': symbol,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'high': self.safe_float(stats, 'high'),
            'low': self.safe_float(stats, 'low'),
            'bid': self.safe_float(ticker, 'best_bid_price'),
            'bidVolume': None,
            'ask': self.safe_float(ticker, 'best_ask_price'),
            'askVolume': None,
            'vwap': None,
            'open': None,
            'close': last,
            'last': last,
            'previousClose': None,
            'change': None,
            'percentage': None,
            'average': None,
            'baseVolume': None,
            'quoteVolume': self.safe_float(stats, 'volume'),
            'info': ticker,
        }

    async def fetch_ticker(self, symbol, params={}):
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'instrument_name': market['id'],
        }
        response = await self.publicGetTicker(self.extend(request, params))
        return self.parse_ticker(response['result'], market)

    def parse_trade(self, trade, market=None):
        id = self.safe_string(trade, 'trade_id')
        orderId = self.safe_string(trade, 'order_id')
        symbol = None
        if market is not None:
            symbol = market['symbol']
        timestamp = self.safe_integer(trade, 'timestamp')
        side = self.safe_string(trade, 'direction')
        price = self.safe_float(trade, 'price')
        amount = self.safe_float(trade, 'amount')
        cost = None
        if amount is not None:
            if price is not None:
                cost = amount * price
        fee = None
        feeCost = self.safe_float(trade, 'fee')
        if feeCost is not None:
            feeCurrencyId = self.safe_string(trade, 'fee_currency')
            feeCurrencyCode = self.safe_currency_code(feeCurrencyId)
            fee = {
                'cost': feeCost,
                'currency': feeCurrencyCode,
            }
        return {
            'id': id,
            'info': trade,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'symbol': symbol,
            'order': orderId,
            'type': None,
            'side': side,
            'takerOrMaker': None,
            'price': price,
            'amount': amount,
            'cost': cost,
            'fee': fee,
        }

    async def fetch_trades(self, symbol, since=None, limit=None, params={}):
        await self.load_markets()
        response = []
        market = self.market(symbol)
        request = {
            'instrument_name': market['id'],
        }
        if limit is not None:
            request['count'] = limit
        else:
            request['count'] = 1000
        if since is not None:
            request['start_timestamp'] = since
            if 'to' in params:
                request['end_timestamp'] = params['to']
            else:
                request['end_timestamp'] = self.milliseconds()
            response = await self.publicGetLastTradesByInstrumentAndTime(self.extend(request, params))
        else:
            response = await self.publicGetLastTradesByInstrument(self.extend(request, params))
        result = self.safe_value(response, 'result', {})
        trades = self.safe_value(result, 'trades', [])
        return self.parse_trades(trades, market, since, limit)

    async def fetch_order_book(self, symbol, limit=None, params={}):
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'instrument_name': market['id'],
        }
        timestamp = self.nonce()
        response = await self.publicGetOrderBook(self.extend(request, params))
        orderbook = self.parse_order_book(response['result'], timestamp, 'bids', 'asks')
        return self.extend(orderbook, {
            'nonce': self.safe_integer(response['result'], 'timestamp'),
        })

    def convert_trading_view_to_ohlcv(self, ohlcvs):
        # "jsonrpc": "2.0",
        # "id": 833,
        # "result": {
        #   "volume": [19.007942601, 20.095877981],
        #   "cost": [19000.0, 23400.0],
        #   "ticks": [1554373800000, 1554375600000],
        #   "status": "ok",
        #   "open": [4963.42, 4986.29],
        #   "low": [4728.94, 4726.6],
        #   "high": [5185.45, 5250.87],
        #   "close": [5052.95, 5013.59]
        # },
        # "usIn": 1554381680742493,
        # "usOut": 1554381680742698,
        # "usDiff": 205,
        # "testnet": False
        # }
        result = []
        for i in range(0, len(ohlcvs['ticks'])):
            result.append([
                ohlcvs['ticks'][i],
                ohlcvs['open'][i],
                ohlcvs['high'][i],
                ohlcvs['low'][i],
                ohlcvs['close'][i],
                ohlcvs['volume'][i],
            ])
        return result

    async def fetch_ohlcv(self, symbol, timeframe='1m', since=None, limit=None, params={}):
        if since is None and limit is None:
            raise ArgumentsRequired(self.id + ' fetchOHLCV requires either a `since` argument or a `limit` argument(or both)')
        await self.load_markets()
        market = self.market(symbol)
        periodInSeconds = self.parse_timeframe(timeframe)
        duration = periodInSeconds * limit * 1000
        to = self.milliseconds()
        if since is None:
            since = to - duration
        else:
            to = self.sum(since, duration)
        request = {
            'instrument_name': market['id'],
            'resolution': self.timeframes[timeframe],
            'start_timestamp': int(since),
            'end_timestamp': to,
        }
        response = await self.publicGetTradingviewChartData(self.extend(request, params))
        #
        #     {
        #         "success": True,
        #         "result":[
        #             {
        #                 "close":177.23,
        #                 "high":177.45,
        #                 "low":177.2,
        #                 "open":177.43,
        #                 "startTime":"2019-10-17T13:27:00+00:00",
        #                 "time":1571318820000.0,
        #                 "volume":0.0
        #             },
        #             {
        #                 "close":177.26,
        #                 "high":177.33,
        #                 "low":177.23,
        #                 "open":177.23,
        #                 "startTime":"2019-10-17T13:28:00+00:00",
        #                 "time":1571318880000.0,
        #                 "volume":0.0
        #             },
        #         ],
        #     }
        #
        result = self.safe_value(response, 'result', [])
        return self.parse_trading_view_ohlcv(result, market, timeframe, since, limit)

    def parse_trading_view_ohlcv(self, ohlcvs, market=None, timeframe='1m', since=None, limit=None):
        result = self.convert_trading_view_to_ohlcv(ohlcvs)
        return self.parse_ohlcvs(result, market, timeframe, since, limit)

    def parse_order_status(self, status):
        statuses = {
            'open': 'open',
            'cancelled': 'canceled',
            'filled': 'closed',
        }
        return self.safe_string(statuses, status, status)

    def parse_order(self, order, market=None):
        timestamp = self.safe_integer(order, 'creation_timestamp')
        lastUpdate = self.safe_integer(order, 'last_update_timestamp')
        lastTradeTimestamp = self.safe_integer(order, 'last_update_timestamp')
        id = self.safe_string(order, 'order_id')
        price = self.safe_float(order, 'price')
        average = self.safe_float(order, 'average_price')
        amount = self.safe_float(order, 'amount')
        filled = self.safe_float(order, 'filled_amount')
        if lastTradeTimestamp is None:
            if filled is not None:
                if filled > 0:
                    lastTradeTimestamp = lastUpdate
        remaining = None
        cost = None
        if filled is not None:
            if amount is not None:
                remaining = amount - filled
            if price is not None:
                cost = price * filled
        status = self.parse_order_status(self.safe_string(order, 'order_state'))
        side = self.safe_string(order, 'direction')
        if side is not None:
            side = side.lower()
        feeCost = self.safe_float(order, 'commission')
        if feeCost is not None:
            feeCost = abs(feeCost)
        fee = {
            'cost': feeCost,
            'currency': 'BTC',
        }
        type = self.safe_string(order, 'order_type')
        marketId = self.safe_string(order, 'instrument_name')
        symbol = None
        if marketId in self.markets_by_id:
            market = self.markets_by_id[marketId]
            symbol = market['symbol']
        return {
            'info': order,
            'id': id,
            'timestamp': timestamp,
            'datetime': self.iso8601(timestamp),
            'lastTradeTimestamp': lastTradeTimestamp,
            'symbol': symbol,
            'type': type,
            'side': side,
            'price': price,
            'amount': amount,
            'cost': cost,
            'average': average,
            'filled': filled,
            'remaining': remaining,
            'status': status,
            'fee': fee,
            'trades': None,  # todo: parse trades
        }

    async def fetch_order(self, id, symbol=None, params={}):
        await self.load_markets()
        request = {
            'order_id': id,
        }
        response = await self.privateGetOrderState(self.extend(request, params))
        result = self.safe_value(response, 'result')
        if result is None:
            raise OrderNotFound(self.id + ' fetchOrder() ' + self.json(response))
        return self.parse_order(result)

    async def create_order(self, symbol, type, side, amount, price=None, params={}):
        await self.load_markets()
        request = {
            'instrument_name': self.market_id(symbol),
            'amount': amount,
            'type': type,
            # 'post_only': 'false' or 'true', https://github.com/ccxt/ccxt/issues/5159
        }
        if type == 'stop_market' and price is not None:
            request['stop_price'] = price
            trigger = self.safe_value(params, 'trigger')
            if trigger is None:
                trigger = 'last_price'
            request['trigger'] = trigger
        elif price is not None:
            request['price'] = price
        method = 'private' + self.capitalize(side)
        response = await getattr(self, method)(self.extend(request, params))
        order = self.safe_value(response['result'], 'order')
        if order is None:
            return response
        return self.parse_order(order)

    async def edit_order(self, id, symbol, type, side, amount=None, price=None, params={}):
        await self.load_markets()
        request = {
            'order_id': id,
        }
        if amount is not None:
            request['amount'] = amount
        if price is not None:
            request['price'] = price
        response = await self.privateEdit(self.extend(request, params))
        return self.parse_order(response['result']['order'])

    async def cancel_order(self, id, symbol=None, params={}):
        await self.load_markets()
        request = {
            'order_id': id,
        }
        response = await self.privateCancel(self.extend(request, params))
        return self.parse_order(response['result']['order'])

    async def fetch_open_orders(self, symbol=None, since=None, limit=None, params={}):
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchOpenOrders() requires a `symbol` argument')
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'instrument_name': market['id'],
        }
        response = await self.privateGetOpenOrdersByInstrument(self.extend(request, params))
        return self.parse_orders(response['result'], market, since, limit)

    async def fetch_closed_orders(self, symbol=None, since=None, limit=None, params={}):
        if symbol is None:
            raise ArgumentsRequired(self.id + ' fetchClosedOrders() requires a `symbol` argument')
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'instrument_name': market['id'],
        }
        response = await self.privateGetOrderHistoryByInstrument(self.extend(request, params))
        return self.parse_orders(response['result'], market, since, limit)

    async def fetch_my_trades(self, symbol=None, since=None, limit=None, params={}):
        await self.load_markets()
        market = self.market(symbol)
        request = {
            'instrument_name': market['id'],
        }
        if limit is not None:
            request['count'] = limit  # default = 20
        response = await self.privateGetUserTradesByInstrument(self.extend(request, params))
        trades = self.safe_value(response, 'result', [])
        return self.parse_trades(trades, market, since, limit)

    async def fetch_time(self, params={}):
        response = await self.publicGetTime()
        return self.safe_integer(response, 'result')

    def nonce(self):
        return self.milliseconds()

    def random_nonce(self, length):
        result = self.hash(self.encode(self.apiKey + str(self.nonce())), 'sha512', 'base64')
        return result[0:length]

    def sign(self, path, api='public', method='POST', params={}, headers=None, body=None):
        url = self.urls['api'] + '/api/' + self.version + '/' + api
        query = self.omit(params, self.extract_params(path))
        if api == 'public':
            if path == 'auth':
                self.check_required_credentials()
        else:
            nonce = self.nonce()
            self.check_required_credentials()
            token = self.safe_string(self.options, 'accessToken')
            if token is None:
                self.sign_in()
            else:
                expires = self.safe_integer(self.options, 'expires')
                if expires is not None:
                    if nonce >= expires:
                        self.sign_in()
                    else:
                        self.refresh_token()
            if query:
                token = self.safe_string(self.options, 'accessToken')
            headers = {
                'Content-Type': 'application/json',
                'Authorization': 'bearer ' + token,
            }
            query.extend(query, {'access_token': token})
            query = self.keysort(query)
            body = self.json(query)
        return {'url': url, 'method': method, 'body': body, 'headers': headers}

    async def sign_in(self, params={}):
        data = {
            'grant_type': 'client_credentials',
            'client_id': self.apiKey,
            'client_secret': self.secret,
        }
        response = await self.publicAuth(self.extend(data, params))
        result = self.safe_value(response, 'result')
        accessToken = self.safe_string(result, 'access_token')
        refreshToken = self.safe_string(result, 'refresh_token')
        if not accessToken:
            raise AuthenticationError(self.id + ' signIn() failed to authenticate. Access token missing from response.')
        expiresIn = self.safe_integer(result, 'expires_in')
        self.options['expires'] = self.sum(self.nonce(), expiresIn * 1000)
        self.options['accessToken'] = accessToken
        self.options['refreshToken'] = refreshToken
        return result

    async def refresh_token(self, params={}):
        data = {
            'grant_type': 'refresh_token',
            'refresh_token': self.options['refreshToken'],
        }
        response = await self.publicAuth(self.extend(data, params))
        result = self.safe_value(response, 'result')
        accessToken = self.safe_string(result, 'access_token')
        refreshToken = self.safe_string(result, 'refresh_token')
        if not accessToken:
            raise AuthenticationError(self.id + ' signIn() failed to authenticate. Access token missing from response.')
        expiresIn = self.safe_integer(result, 'expires_in')
        self.options['expires'] = self.sum(self.nonce(), expiresIn * 1000)
        self.options['accessToken'] = accessToken
        self.options['refreshToken'] = refreshToken
        return result

    def handle_errors(self, httpCode, reason, url, method, headers, body, response, requestHeaders, requestBody):
        if not response:
            return  # fallback to default error handler
        error = self.safe_string(response, 'error')
        if (error is not None) and (error != '0'):
            feedback = self.id + ' ' + body
            self.throw_exactly_matched_exception(self.exceptions, error, feedback)
            raise ExchangeError(feedback)  # unknown message
